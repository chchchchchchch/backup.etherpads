% Possible titles:
% "the number one problem with free software design is fonts"
% Tales about forging
% Lasagna, dry ricks on a wall, 
% Fonts, editors, gui, experts and learning
% Robofontsforgelabgrapher
% Having the tools is just the beginning - yes!

% FS = Femke Snelting
% DC = Dave Crossland
% LL = Ludivine Loiseau
% HH = Harrison
% PH = Pierre Huyghebaert
% ALL = All

% USED FOR NAME INDEXING
% HIDDENKEYWORDS: Crossland, Dave|Loiseau, Ludivine|Harrison|Huyghebaert, Pierre


% TITLE: Having the tools is just the beginning

% SCALEFONT: 1.2

At the **Libre Graphics Meeting 2008**, OSP picks up a conversation that Harrison allegedly started in a taxi in Montreal, a year earlier. We meet font designer and developer Dave Crossland in a noisy food court to speak about his understanding of the intertwined histories of typography and software, and the master in type design at the Department of Typography at the University of Reading. Since the interview, a lot has happened. Dave finished his typeface Cantarell and moved on to consult the Google Web Fonts project, commissioning new typefaces designed for the web. He is also  currently offering lectures on typeface design with Free Software.

% RESETFONT:
% BIGSKIP:


% NOWSPEAKING: HH
% ------------------------
1, 2.

% NOWSPEAKING: LL
% ------------------------
Hello Dave.

% NOWSPEAKING: ALL
% ------------------------
Hellooo ...

% NOWSPEAKING: DC
% ------------------------
Alright!

% NOWSPEAKING: HH
% ------------------------
Well, thank you for taking a bit of time with us for the interview. First thing is maybe to set a kind of context of your situation, your current situation. 
What you've done before. Why are you setting fonts and these kind of things.

% NOWSPEAKING: DC
% ------------------------
Oh yes, yeah. Well, I take it quite far back, when I was a teenager.
I was planning to do computer science university
studying like mathematics and physics in highschool.
I needed some work experience.
I decided I didn't want to work with computers.
So I dropped maths and physics and I started working at ...
I mean I started studying art and design, and also socio-linguistics in highschool.
I was looking at going to Fine Arts but I wasn't really too worried about if I could
get a job at the end of it, because I could get a job with computers, if I needed to get a job
So I studied that at my school for like a one year course, after my school.
A foundation year, and the deal with that is that you study all the different art and design disciplines. 
Because in highschool you don't really have the specialities where you specifically study textile or
photography, not every school has a darkroom, schools are not well equipped.

You get to experience all these areas of design and in that we studied graphic design, motion graphics and I found in this a good opportunity to bring together the computer things with fine arts and visual arts aspects.
In graphic design in my school it was more about paper, it had nothing to do with computers.
In art school, that was more the case. So I grew into graphic design.

% MEANWHILE: Ordering coffee and change of background music: _Oh yeah, African beats!_

% N!OWSPEAKING: DC
% ------------------------
So, yes. I was looking at graphic design that was more computer based than in art school.
I wasn't so interested in like regular illustration as a graphic design.
Graphic design has really got three purposes: to persuade people, that's advertising; to entertain people, movie posters, music album covers, illustration magazines; and there is also graphic design to inform people, in England it's called 'information design', in the US it's called 'information architecture'... stucturing websites, information design.
Obviously a big part of that is typography, so that's why I got interested in typography, via information design. I studied at Ravensbourne college  in London, what I applied for was graphic information design.
I started working at the IT department, and that really kept me going to that college, I wasn't so happy with the direction of the courses. The IT department there was really really good and I ended up switching to the interaction design course, because that had more freedom to do the kind of typographic work I was intersted in.

So I ended up looking at Free Sofware design tools because I became frustrated by the limitations of the Adobe software which in the college was using, just what everybody used.
And at that point I realized what 'software freedom' meant.
I've been using Debian since I was like a teenager, but I hadn't really looked to the depth of what Free Software was about.
I mean back in the nineties Windows wasn't very good but probably at that time 2003-2004, MacOSX came out and it was getting pretty nice to use.
I bought a Mac laptop without really thinking about it and because it was a Unix I could use the software like I was used to do. And I didn't really think about the issues with Free Software, MacOSX was Unix so it was the same I figured. But when I started to do my work I really stood against the limitations of Adobe software, specifically in parallel publishing which is when you have the same basic informations that you want to communicate in different mediums. 
You might want to publish something in .pdf, on the web, maybe also on your mobile phone, etc.
And doing that with Adobe software back then was basically impossible.
I was aware of Free Software design tools and it was kind of obvious that even if they weren't very pushed by then they at least had the potential to be able to do this in a powerful way.
So that's what I figured out. What that issue with Free Software really meant.
Who's in control of the software, who decides what it does, who decides when it's going to support this feature or that feature, because the features that I wanted, Adobe wasn't planning to add them. So that's how I got interested in Free Software.

When I graduated I was looking for something that I could contribute in this area.
And one of the Scribus guys, Peter Linnell, made an important post on the Scribus blog.
Saying, you know, the number one problem with Free Software design is fonts, like it's dodgy fonts with incorrect this, incorrect that, have problems when printed as well...
and so yeah, I felt woa, I have a background in typography and I know about Free Software, I could make contributions in fonts.
Looking into that area, I found that there was some postgraduate course you can study at in Europe. There's two, there is one at The Hague in The Netherlands and one at Reading.
They're quite different courses in their character and in how much they cost and how long they last for
and what level of qualification they are.
But they're both postgraduate courses which focus on typeface design and font software development.
So if you're interesed in that area, you can really concentrate for about a year and bring your skills up to a high professional level.
So I applied to the course at Reading and I was accepted there and I'm currently studying there part time.
I'm studying there to work on Free Software fonts. So that's the full story of how I ended up in this area.

% NOWSPEAKING: HH
% ------------------------
Excellent! 
Last time we met, you summarized in a very relevant way the history of font design software which is a proof by itself that everything is related with fonts and this kind of small networks and I would like you to summarize it again.


% MEANWHILE: Laughing
% HIDDENKEYWORD: Laughing

% NOWSPEAKING: DC
% ------------------------
Alright.
In that whole journey of getting into this area of parallel publishing and automated design, I was asking around for people who worked in that area because at that time not many people had worked in parallel publishing.
It's a lot of a bigger deal now, especially in the Free Software community where we have Free Software manuals translated into many languages,
written in .doc and .xml and then transformed into print and web versions and other versions.
But back then this was kind of a new concept, not all people worked on it. And so, asking around, I heard about the department of typography at the university of Reading.
One of the lecturers there, actually the lecturer of the typeface design course put me on to a designer in Holland, Petr van Blokland. He's a really nice guy, really friendly. And I dropped him an e-mail as I was in Holland that year -- just dropped by to see him and it turned out he's not only involved in parallel publishing and automated design, but also in typedesign. For him there is really no distinctions between type design and typography.
It's kind of like a big building -- you have the architecture of the building but you can also go down into the bricks.
It's kind of like that with typography, the type design is all these little pieces you assembly to create the typography out of .
He's an award-winning typeface designer and typographer and he was involved in the early days of typography very actively.
He kind of explained me the whole story of type design technology.


% MEANWHILE: Coffee delivery and jazz music


% N!OWSPEAKING: DC
% ------------------------
So, the history of typography actually starts with Free Software, with Donald Knuth and his TeX.
The TeX typesetting system has its own font software or font system called Metafont.
Metafont is a font programming language, and algebraic programming language describing letter forms.
It really gets into the internal structure of the shapes. This is a very non-visual programming approach to it where you basically use this programming language to describe with algebra how the shapes make up the letters.
If you have a capital H, you got essentially 3 lines, two verticals stands and a horizontal crossbar and so, in algebra you can say that you've got one ratio whitch is the height of the vertical lines and another ratio which is the width between them and another ratio which is the distance between the top point and the middle point of the crossbar and the bottom point.
By describing all of that in algebra, you really describe the structure of that shape and that gives you a lot of power because it means you can trace a pen nib objects over that skeleton to generate the final typeform and so you can apply variations, you can rotate the pen nib -- you can have different pen nib shapes
And you can have a lot of different typefaces out of that kind of source code. 
But that approach is not a visual approach, you have to take it with a mathematical mind and that isn't something which graphic designers  typically have as a strong part of their skill set.

The next step was describing the outline of a typeface, and the guy who did this was working, I believe, at URW. He invented a digital typography system or typedesign program called Ikarus. The rumor is it's called Ikarus because it crashed too much. Peter Karow is this guy. He was the absolute unknown real pioneer in this area.
They were selling this proprietary software powered by a tablet, with a drawing pen for entering the points and it used it's own kind of spline-curve technology.

This was very expensive -- it ran on DMS computers and URW was making a lot of money selling those mini computers in well I guess late 70s and early 80s.
And there was a new small home computer that came out called the Apple Macintosh. This was quite important because not only was it a personal computer. It had a graphical user interface and also a printer, a laser writer which was based on the Adobe PostScript technology.
This was what made desktop publishing happen. I believe it was a Samsung printer revised by Apple and Adobe's PostScript technology.
Those three companies, those three technologies was what made desktop publishing happen.
Petr van Blokland was involved in it, using the Ikarus software, developing it. And so he ported the program to the Mac.
So Ikarus M was the first font editor for personal computers and this was taken on by URW but never really promoted because the...
Mac costs not a lot money compared to those big expensive computers.
So, Ikarus M was not widely distributed. It's kind of an obvious idea -- you know you have those innovative computers doing graphic interfaces and laser printing and several different people had several different ideas about how to employ that.
Obviously you had John Warnock within Adobe and at that point Adobe was a systems company, they made this PostScript system and these components, they didn't make any user applications. But John Warnock -- and this is documented in the book on the Adobe story -- he really pushed within the company to develop Adobe Illustrator, which allowed you to interact with the edit PostScript code and do vector drawings interactively. That was the kind of illustration and graphic design which we mentioned earlier.
That was the... page layout sort of thing and that was taking care of by a guy called Paul Brainerd, whose company Aldus made PageMaker. That did similar kind of things than Illustrator, but focused on page layout and typography,  text layout rather than making illustrations.
So you had Illustrator and PageMaker and this was the beginning of the desktop publishing tool-chain.

% NOWSPEAKING: HH
% ------------------------
When was it?

% NOWSPEAKING: DC
% ------------------------
This is in the mid-eighties. The Mac came out in 1984

% NOWSPEAKING: PH
% ------------------------
Illustrator in 1986 I think.

% NOWSPEAKING: DC
% ------------------------
Yeah. And then the Apple LaserWriter, which is I believe a Samsung printer, came out in 1985, and I believe the first edition of Illustrator was in 1988...

% NOWSPEAKING: PH
% ------------------------
No, I think Illustrator 1 was in 1986.

% NOWSPEAKING: DC
% ------------------------
OK, if you read the official Adobe story book, it's fully documented[@pfiffner:2002:adobe].

% NOWSPEAKING: HH
% ------------------------
It's interesting that it follows so quickly after the Macintosh.

% NOWSPEAKING: DC
% ------------------------
Yes! That's right. It all happened very quickly because Adobe and Apple had really built with PostScript and the MacOS, they had the infrastructure there, they could build on top of. And that's a common thing we see played out over and over... Things are developed quite slowly when they are getting the infrastructure right, and then when the infrastructure is in place you see this burst of activity where people can slot it together very quickly  to make some interesting things.
So, you had this other guy called Jim von Ehr and he saw the need for a graphical user interface to develop fonts with and so he founded a small compagny called Altsys and he made a program called Fontographer.
So that became the kind of de-facto standard font editing program.

% NOWSPEAKING: PH
% ------------------------
And before that, do you know what font design software Adobe designers used?

% NOWSPEAKING: DC
% ------------------------
I don't know. Basically when Adobe made PostScript for the Apple LaserWriter then they had the core 35 PostScript fonts, which is about a thousand families, 35 differents weights or variants of the fonts.
And I believe that those were from Linotype. Linotype developed that in collaboration with Adobe, I have no idea about what software they used, they may have had their own internal software.
I know that before they had Illustrator they were making PostScript documents by hand like TeX, programming PostScript sourcecode.
It might have been in a very low tech way.
Because those were the core fonts that have been used in PostScript.

So you had Fontographer and this is yeah I mean a GUI application for home computers to make fonts with. Fontographer made early 90s David Carson graphic design posters.
Because it meant that anybody could start making fonts not only people that were in the type design guild.
That all David Carson kind of punk graphic design, it's really because of Desktop publishing and specifically because of Fontographer.
Because that allowed people to make these fonts. Previous printing technologies wouldn't allow you to make these kinds of fonts without extreme efforts.
I mean a lot of the effects you can do with digital graphics you can't do without digital graphics -- air brushing sophisticated effects like that can be achieved but it's really a lot of efforts.

So going back to the guys from Holland, Petr has a younger brother called Erik and he went to the college at the Royal Academie of design the KABK in the Hague with a guy who is Just van Rossum and he's the younger brother of Guido van Rossum who is now quite famous because he's the guy who developed and invented Python.
In the early 90s Jim von Ehr is developping Fontographer, and Fontographer 4 comes out and Petr and Just and Erik managed to get a copy of the source code of Fontographer 3 which is the golden version that we used, like Quark, that was what we used throughout most of the 90s and so they started adding things to that to do scripting on Fontographer with Python and this was called Robofog, and that was still used until quite recently, because it had features no one has ever seen enywhere else.
The deal was you had to get a Fontographer 4 license, and then you could get a Robofont license, for Fontographer 3.
Then Apple changed the system architecture and that meant Fontographer 3 would no longer run on Apple computers. Obviously that was a bit of a damn on Robofog.
Pretty soon after that Jim sold Fontographer to Macromedia.
He and his employes continued to develop Fontographer into Freehand, it went from a font drawing application into a more general purpose illustration tool.
So Macromedia bought Altsys for Freehand because they were competing with Adobe at that time. And they didn't really have any interest in continuing to develop Fontographer.
Fonts is a really obscure kind of area. As a proprietary software company, what you are doing things to make a profit and if the market is too small to justify your investment then you'll just not keep developing the software.
Fontographer shut at that point.

% NOWSPEAKING: PH
% ------------------------
I think they paid one guy to maintain it and answer questions.

% NOWSPEAKING: DC
% ------------------------
Yeah. I think they even stop actively selling it, you had to ask them to sell you a license.
Fontographer has stopped at that point and there was no actively developed font editor.
There were a few Windows programs, which were kind of shareware for developing fonts because in this time Apple and Microsoft got fed up with paying Adobe's extortion of PostScript licensing fees.
They developed their own font format called TrueType. There were Windows font editing programs.

% N!OWSPEAKING: DC
% ------------------------
Yeah. I think they even stop actively selling it, you had to ask them to sell you a license.
Fontographer has stopped at that point and there was no actively developed font editor.
There were a few Windows programs, which were kind of shareware for developing fonts because in this time Apple and Microsoft got fed up with paying Adobe's extortion of PostScript licensing fees.
They developed their own font format called TrueType.
When Fontographer stopped there was the question of which one will become the predominant font editor and so there was Fontlab. This was developed by a guy Yuri Yarmola, Russian originally I believe, and it became the primary proprietary type design tool.

The Python guys from Holland started using Fontlab.
They managed to convince the Fontlab guys to include Python scripting support in Fontlab. Python had become a major language, for doing this kind of scripting. So Fontlab added in Python scripting.
And then different type designers, font developers started to use Python scripts to help them develop their fonts, and a few of the guys doing that decided to join up and they created the RoboFab project which took the ideas that had been developed for Robofob and reimplemented them with Fontlab -- so RoboFab. This is now a Free Software package, under the MIT Python style licence.
So it is a Free Software licence but without copyleft. It has beeing developed as a collaborative project.
If you're interested in the development you can just join the mailing list.
It's a very mature project and the really beautiful thing about it that they developed a font object model and so in Python you have a very clean and easily understandable object-oriented model of what a font is.
It makes it very easy to script things. This is quite exciting because that means you can start to do things which are just not really visible with the graphic design interface.
The thing with those fonts is like there is a scale, it is like architecture. You've got the designer of the building and the designer of the bricks.
With a font it is the same. You have the designer who shapes each letter and then you've got the character-spacing which makes what a paragraph will look like.
A really good example of this is if you want to do interpolation, if you have a very narrow version of a font and a very wide one, and you want to interpolate in different versions between those two masters -- you really want to do that in a script, and RoboFab makes this really easy to do this within Fontlab.
The ever important thing about RoboFab was that they developed UFO, I think it's the Universal Font Object -- I'm not sure what the exact name is -- but it's a XML font format which means that you can interchange font source data with different programs and specifically that means that you have a really good font interpolation program that can read and write that UFO XML format and then you can have your regular type design format font editor that will generate bitmap font formats that you actually use in a system. You can write your own tool for a specific task and push and pull the data back and forth. Some of these Dutch guys, especially Erik has written a really good interpolation tool. So, as a kind of thread in the story of font.
Remember that time where Fontographer was not developed actively then you have Georges Williams from California who was interested in digital typography and fonts and Fontographer was not being activelly developed and he found that quite frustrating so he said like _Well, I'll write my own font editor_. He wrote it from scratch. I mean this is a great project.

% NOWSPEAKING: LL
% ------------------------
Can you tell us some details about your course?

% NOWSPEAKING: DC
% ------------------------
There are four main deliverables in the course, that you normally do in one year, twelve months. 
The big thing is that you do a professional quality OpenType font, with an extended pan-european latin coverage in regular and italic, maybe bold. You also do a complex non-latin in Arabic, Indic, maybe Cyrillic ... well not really Cyrillic because there are problems to get a Cyrillic type experts from Russia to Britain... or Greek, or any script with which you have a particular background in. And so, they didn't mandate which software students can use, and I was already used to FontForge, while pretty much all the other students were using FontLab. This font development is the main thing.
The second thing is the dissertation, that goes up to 8,000 words, an academic master in typography dissertation.
Then there is a smaller essay, that will be published on http://www.typeculture.com/academic_resource/articles_essays/, and it's a kind of a practice for writing the dissertation.
Then you have to document your working process throughout the year, you have to submit your working files, source files. Every single step is documented and you have to write a small essay describing your process. And also, of course, apart from the type design, you make a font specimen, so you make a very nice piece of design that show up your font in use, as commercial companies do.
All that takes a full intense year.
For British people, the course costs about £3,000, for people in the EU, it costs about £5,000 and about £10,000 for non-EU. Have a look at the website for details, but yes, it's very expensive.

% NOWSPEAKING: LL
% ------------------------
And did you also design a font?

% NOWSPEAKING: DC
% ------------------------
Yes. But I do it part-time. Normally, you could do the typeface, and the year after you do the dissertation. For personal reasons, I do the dissertation first, in the summer, and next year I'll do the typeface, I think in July next year.

% NOWSPEAKING: LL
% ------------------------
You have an idea on which font you'll work?

% NOWSPEAKING: DC
% ------------------------
Yes. The course doesn't specify which kind of typeface you have to work on. But they really prefer a textface, a serif one, because it's the most complicate and demanding work. If you can do a high quality serif text typeface design, you can do almost any typeface design! Of course, lots of students do also a sans serif typeface to be read at 8 or 9 points, or even for by example dictionaries at 6 or 7 points. Other students design display typefaces that can be used for pararaphs but probably not at 9 points...

% NOWSPEAKING: FS
% ------------------------
It looks like you are asked to produce quite a lot of documents. Are these documents published anywhere, are they available for other designers?

% NOWSPEAKING: DC
% ------------------------
Yes, the website is http://www.typefacedesign.net and the teaching team encourages students to publish their essays, and some people have published their dissertation on the web, but it varies. Of course, being an academic dissertation, you can request if from the university.

% NOWSPEAKING: FS
% ------------------------
I'm asking because in various presentations the figure of the 'expert typographer' came up, and the role Open Source software could have, to open up this guild.

% NOWSPEAKING: DC
% ------------------------
Yeah, the course in The Hague is cheaper, the pound was quite high so it's expensive to live in Britain during the last year, and the number of people able to produce high quality fonts is pretty small... And these courses are quite inaccessible for most of the people because of being so expensive, you have to be quite commited to follow them. The proprietary font editing software, even with a student discount, is also a bit expensive. So yes, Free and Open Source software could be an enabler. FontForge allows anybody to grab it on the Internet and start making fonts. But having the tools is just the beginning. You have to know what you're doing to a design a typeface, and this is separate from font software techinques. And books on the subject, there are quite a few, but none are really a full solution. There www.typophile.org, a type design forum on the web, where you can post preliminary designs. But of course you do not get the kind of critical feedback as you can get on a masters course...

% NOWSPEAKING: FS
% ------------------------
We talked to Denis Jacquerye from the DéjàVu project, and most of the people who collaborate on the project are not type designers but people who are interested in having certain glyphs added to a typeface. And we asked him if there is some kind of teaching going on, to be sure that the people contributing understand what they are doing. Do you see any way of, let's say, a more open way of teaching typography starting to happen?

% NOWSPEAKING: DC
% ------------------------
Yeah, I mean, that the part of why the Free Software movement is going to branch down into the Free Culture movement. There is that website Freedom Defined[^]{http://freedomdefined.org} that states that the principles of Free Software can apply to all other kind of works. This isn't shared by everybody in the Free Software movement. Richard Stallman makes a clear difference between three kind of works: the ones that function like software, encyclopedias, dictionaries, text books that tell how to makes things, and text typefaces. Art works like music and films, and text works about opinions like scientific papers or political manifestos. He believes that different kinds of rights should apply for that different kind of works. There is also a different view in which anything in a computer can be edited ought to be free like Free Software. That is certainly a position that many people take in the Free Software community. In the WikiMedia Foundation text books project, you can see that when more and more people are involved in typeface design from the Free Culture community, we will see more and more education material. There will be a snowball effect.

% NOWSPEAKING: PH
% ------------------------
Dave, we are running out of time...

% NOWSPEAKING: DC
% ------------------------
So just to finish about the FontForge Python scripting ... There is Python embeded in FontForge so you can run scripts to control FontForge, you can add new features that maybe would be specific to your font and then in FontForge there is also a Python module which means that you can type into a Python interpretor. You type `import fontforge` and if it doesn't give you an error then you can start to do FontForge functions, just like in the RoboFab environment. And in the process of adding that George kind of re-architectured the FontForge source code so instead of being one large program, there is now a large C library, libfontforge, and then a small C program for rendering and also the Python module, a binding or interface to that C library. This means if you are an application programmer it is very straightforward to make a new font editor in whatever language you want, using whatever graphic toolkit you want. So if you're a JDK guy or a GTK guy or even if you're on Windows or Mac OS X, you can make a font editor that has all the functionality of FontForge. FontForge is a kind of engine to make font editors. This is quite exciting because it means it's pretty straight forward for somebody to write a font editing program which is designed for, say, beginners.

So, to come back to what we were just talking about in term of educational materials to get people new to typeface design to be confident with themselves. Maybe they won't be in that professional level yet, but they will be pleased with their own work and happy to work in a user interface where you feel like in 2006, you know, with nice icons nice windows; anti aliasing and these kind of things.

I mean there's nothing wrong with the FontForge interface. It is what it is. But it scares a lot of people away, people say that they don't like this. I think it is too scary, too different.
I think we are going to see some exciting stuff in the next few years in the Free Software font editor space.

