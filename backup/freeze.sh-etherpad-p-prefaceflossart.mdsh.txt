% http://texts.bleu255.com/preface-flossart/

% WRITTENBY: Marloes de Valk, Aymeric Mansoux

The relationship between artist, tool, content and audience has never been of
greater importance than in digital culture. Data has become both instrument,
material and medium, all of which are reproducible without cost and
distributable instantaneously. The software industry is well aware of this, and
consequently has adopted the model of selling licenses instead of software.
Similarly, the entertainment industry does not release movies and music to an
audience, but instead sells end user license agreements that provide a limited
right to the playback of digital content. In both cases the study, modification
and redistribution of this digital information is forbidden. At the same time,
content creators are inclined to use software specifically tuned and developed
for such a distribution system. As a consequence creativity becomes a passive
input for a content distribution machine the output of which feeds a passive
audience. The lack of freedom and the absence of connection between the two
opposed components of this production chain give the system all rights to
control both culture and its usage. But is there any alternative?

Actually, yes. What about a model, in which artists and their audience simply
refuse the passive role of user and instead persevere as creators and
collectors of great ideas? In this model, artists could own their own
'tools', would be free to use them whenever and however they want, and
could dissect, hack, embellish and share them, without breaking any laws. The
creative process of an artist is no longer restricted by what software
companies dictate, only by his or her own skill. Software, being more than a
means by which ideas are expressed technically, functions as medium. Software
is the artwork and its code is an integral part of it. In this model, artists
would give free access to this layer of the artwork. Free distribution of the
work would break the artist out of isolation and put him/her in contact with an
audience, a community. Such a model is not utopian, it is already practised by
those artists who choose Free Software and copyleft.

Free/Libre/Open Source Software (FLOSS) can be used, copied, shared, modified,
and redistributed with little or no restriction, always allowing free access to
its source code. The term FLOSS refers to both Free Software as well as Open
Source Software, without bias towards one single approach. Free Software, as
defined by Richard Stallman and promoted by the Free Software Foundation, puts
the emphasis on the freedom that Free Software gives to its users. The four
freedoms of Free Software are: the freedom to use the software for any purpose,
freedom to study and modify its source code, freedom to share and redistribute
the software, and the freedom to improve the software and release your version
of it to the public. Open Source Software on the other hand, tries to avoid the
philosophical and political implications of the interpretation of free as in
freedom, and emphasises the strengths of the peer to peer development model of
Open Source Software, thus trying to appeal more to the corporate world.

The Free Software definition has its roots in the GNU project. In 1983, Richard
Stallman announced the plan for the GNU operating system, composed of 100
percent free software. The GNU project was initiated to give computer users
back their lost freedom. In the fifties, sixties and seventies, software was
mostly produced by its users, and in many ways software was free. In the late
seventies and eighties, companies started to put increasingly tight
restrictions on software through copyright, making the earlier freedoms
illegal. Suddenly, volunteer programmers that were sharing and improving code
were considered thieves. Software became an extremely profitable business.

Most components of the GNU operating system were developed between 1983 and
1991, but the kernel kept on being delayed. When in 1991 Linus Torvalds
released the Linux kernel, and changed the license to the GNU General Public
License in 1992, the lack of a kernel was resolved and the first free operating
system was a reality.

The GNU General Public License was written by Stallman in 1989 for the GNU
project. The GPL is a strong copyleft license, it ensures the 4 freedoms of
Free Software, access to the source code of a work and requires all derivative
works to preserve the same freedoms. A work licensed under the GPL is
copyrighted, thus making sure that licensees are bound by the terms of the
license, and therefore can be sued by the original author if they break the
conditions of the license. Next to that, the copyleft principle is a workaround
to copyright, meant to protect the freedom of licensees instead of the
exclusive rights of the author, with the sole restriction that all derived and
redistributed works must be GPL licensed as well. The GPL is one of the most
popular licenses used for FLOSS.

The development and use of GNU/Linux has exploded during the last few years.
This explosion has resulted from the positive feedback of an increased number
of users, increased needs from users, triggering more development of software
to fulfil those needs, which eventually resulted in even more users. Much of
this increase is due to the massive developments made at the level of the
desktop. Friendlier user interfaces and the more familiar environment of the
desktop have brought a lot of fresh attention to GNU/Linux. The Ubuntu
campaigns have played a big role in this, focusing on usability, accessibility
and ‘user friendliness’. The results of these recent developments are more
GNU/Linux powered desktops and more high quality open source desktop
applications. On top of this, the sheer amount of GNU/Linux distributions has
grown exponentially. In May 2008 Distrowatch lists an increase from three main
distributions in 1995, to a total of 354 active distributions in the database
today, many of which are branches of a few main distributions.

While this increase is undeniable, thoughts along the line of ‘GNU/Linux is
nice but if you want to do some real work you have to use proprietary operating
systems’ are still quite common. This is true as long as you consider ‘real
work’ to consist of working the way proprietary software companies want you
to work. In real life, you are more often confronted with the need for tailored
solutions that can not be delivered by ready made problem solvers. For example,
in the early days of computer animation it was not unusual to work on
proprietary UNIX based systems. With the democratisation of PC hardware and
GNU/Linux in the mid ’90?s, it started to be possible to provide cheaper,
and most of all more flexible, production environments than the single-vendor
solutions and high-priced specialised hardware ones could offer. It only took a
few years for the special effects industry to move its ‘pipeline’ to
GNU/Linux and more generic hardware. At the same time, software companies,
although most of them still following closed source models, ported a great
number of animation, modelling, rendering and post production software to the
free platform. The side effect of this wave in the VFX industry was that
GNU/Linux started to gain popularity outside of the computer science arena.
GNU/Linux became visible to computer artists through the marketing campaigns of
the VFX industry. This triggered a lot of curiosity, and more and more computer
artists gave GNU/Linux a try and discovered there was much more to it than
rendering farms and fancy post production tools.

The user base was steadily growing, and small communities quickly grew into
bigger groups, focused on particular aspects of open source artistic software
and technology, and started to organise large scale events and conventions,
such as the Linux Audio Convention and the Libre Graphics Meeting. The main
difference between users grouped as customers, and users who are part of a
FLOSS community, is that the latter have the ability to be pro-active in the
process of software development by way of writing documentation, providing
support, reporting issues, and in some cases participating in the writing of
the software. The latest iteration of this change in the position of the user
has made the redistribution and customisation of artistic software possible to
the point where groups of practitioners have been able to provide free
operating systems tailored to the needs of artists, performers and musicians.
This development resulted in art and multimedia centred additions to the
growing list of GNU/Linux distributions, with systems such as 64 Studio,
APODIO, dyne:bolic, Musix, pure:dyne, and Ubuntu Studio.

Using FLOSS within digital and software art practice brings lots of added value
to artists. The most immediate benefit is that the software comes with, instead
of just a shrink wrapped box with glossy print, an active and lively community
of users and developers. As a user you are not isolated, but part of this
community. The software doesn’t come with a help desk phone number, but
something much better, other users that help each other via mailing lists,
forums and IRC channels. Once you’ve made it through the first part of the
learning curve, moving from newbie to more advanced user, you discover you have
gained great freedoms. No longer are implementations of artistic concepts bound
by the limits of the software applications that exist. You are free to create
your own tools by combining or modifying existing ones, using the modularity
and flexibility of the GNU/Linux operating system and the accessibility of the
source code of all applications. Small scripts function like a glue between
different low level software. Suddenly you are materialising your concepts as
you would create objects using LEGO blocks. The learning has paid off, this
lower level access to the operating system, software and network greatly
enhances the freedom to technically implement artistic ideas.

In a similar way, the resulting work itself can use a free license and there
are quite a few good reasons for an artist to do so. With respect to generating
an audience for ones work, the choice of an open license will greatly increase
the number of viewers or listeners, especially when published on an online
platform such as archive.org. From a curatorial point of view, the choice for
open systems and licenses can simplify the preservation and maintenance of an
artwork, independent of fickle proprietary standards and limited edition habits
inherited from previous non-digital media. Last but not least, this new
distribution framework seems well suited for today’s prosumer approach, as
demonstrated by the increasing number of independent artist-led organisations,
productions, festivals and distribution platforms such as net-labels.

The openness of an artwork does not only impact its release and relation to its
audience, it also greatly influences the process underlying the artwork.
That’s why it’s important to understand that software is not just a
technical component of digital art, it is the artwork and its code provides
another reading of it. This often forgotten layer of interpretation should be
open for others, to study and understand the work, to learn from, get inspired
by and comment on. It is unfortunate that many artists, including those working
with FLOSS, still resist to this call for openness. They are unwilling to show
the inner workings of their art, for fear of giving away their identity and
ruining their chances of generating income, not realising the latter in fact
relies solely on the performance, exhibition, commissioning and teaching of
their art, not on the software that enables its manifestation.

Beyond the use of artistic and multimedia software, software art using an open
license can have an afterlife the artist releasing it never could have
foreseen. At the moment, this is still quite rare, but this might change and
provide a rich environment for works that could branch and fork into many
directions, passing through many hands, gracefully escaping the fate of a final
resting place in a dusty corner of a forgotten hard disk.

Using FLOSS automatically gives an artists work an extra dimension, a political
statement that is embedded in the choice to use FLOSS instead of proprietary
software. This political statement may seem unrelated to the artistic concept
of a work, but it is far from trivial. It implies an awareness of the fact that
software is the base material of a work of art, like the clay of a sculpture,
and that this choice of material greatly influences the eventual work and its
context. This awareness often leads to the choice of open licenses for the
artistic work itself, feeding developed ideas and technical implementations of
ideas back into the community, enabling the reuse of code and facilitating the
sharing of knowledge. The demystification of software and code is an important
result of this.

This is why it is rare to come across isolated artists using FLOSS. Most of
them quickly find their way to online communities that provide help and
support. The FLOSS scene is also booming with communities and distributed
collectives focused around politics, art and Free Software. Here, artists
frequently show each other bits of code, inspire each other, and most of all,
teach each other. This form of circularity generates an engagement with digital
art that is close to a form of continuous open artistic research, and marks a
strong opposition with the classic top-down design approach of an end-product
form of media art.

Of course, getting started with FLOSS and GNU/Linux within an art practice can
be quite a rocky ride. Even though some Linux distributions would have you
believe otherwise, it is not that easy to learn a completely new system.
GNU/Linux, compared to most proprietary operating systems, takes a very
different approach to its users. Its design is based on the assumption that
users are capable of learning to master the system, instead of the assumption
that users are helpless. At the beginning, you have to unlearn a lot of habits
and constructs you’ve build up using proprietary systems, and no matter how
nice the user interface and desktop of some distributions look, you cannot
avoid the system that lies behind the Graphical User Interface (GUI). Things
have improved a lot in the past few years, and continue to improve, making
Linux much more accessible for new users, but it still remains a challenge for
many.

One of the first things that takes getting used to is how and where to find
documentation. A lot of applications lack the famous ‘help’ button which
brings you to a searchable database of topics, or a step by step ‘how to’.
The writing of documentation is very often at the bottom of the priority list
of any FLOSS development team. This is changing rapidly, and more and more
efforts to write good documentation are undertaken, but until this change has
properly kicked in, users need to use different tactics to find their way
around. The best strategy is learning to do accurate online searches. This will
open up a world of information – sometimes scattered, often incomplete, but
most of the time extremely helpful – written by other users encountering the
same problem as you and describing how to deal with it, on mailinglists,
forums, blogs and wikis.

Switching from a proprietary system to GNU/Linux, or from proprietary software
to FLOSS takes time. As with all new tools, you need to learn a whole new set
of skills before you feel like you can fluently express yourself with them. For
many artists, the time it takes to reach this point means a loss of
productivity. Before you have mastered the new software or system, you find
yourself struggling with tasks you would normally have no problems with.
Besides the frustration this brings, artists need to generate income and this
loss of productivity needs to have a big pay off in the end to be worth this
investment of time. The benefits of using FLOSS can be obscure at first, but
due to more and more artists making the switch and developers aiming to improve
the accessibility of FLOSS, these benefits are becoming increasingly apparent.

The greatest obstacle blocking people from easy access to FLOSS is the fact
that students are very rarely introduced to it at art schools and universities.
The best time to get familiar with computers and software is at school,
especially considering that most people stick with what they’ve learned after
graduating. But most schools and universities are only offering courses using
proprietary software running on proprietary systems. Art students will most
likely only be introduced to the biggest and most dominant producers of closed
commercial tools for artistic production, such as Adobe. Students rarely are
given a choice. The choice of schools and universities to only offer this type
of product has its reasons. Learning to use the most dominant proprietary
software and operating system will make a student much more employable, since
those products are also the ones used in the industry. This of course only goes
for studies aiming at industry, it has no meaning in an art context. And even
when considering employability, skills like concept development, creativity in
the use of tools and thinking outside the box, are much more valuable to a
future employer than knowing how to use a certain product. Those skills will be
outdated as soon as this product gets updated, and learning technical skills
takes less time and expertise than developing a strong artistic and creative
practice.

The wider use of FLOSS is not only blocked by external factors, it is also due
to its community shooting itself in the foot with internal conflicts. The most
famous one being the conflict between the Free Software Foundation and the Open
Source Initiative. Flame wars around notions of freedom haven’t contributed
much to enhance FLOSS’ friendly face. Neither have the many flame wars and
various witch hunts between users of FLOSS and proprietary software. For those
new to the community, it is hard to understand the almost religious fanaticism
and intolerance with which some people express their opinion regarding these
topics. In fact, it seems very much at odds with the philosophy of openness and
sharing that is associated with this community.

This sometimes brutal online behaviour, unorthodox social organisation, and
chaotic spreading of information might come as a shock to those arriving from
the scripted, polished and secure world of customer support. These are not bugs
though, they are features. Indeed, while the basic ideas behind FLOSS are
rather simple and trivial to understand, their practical interpretation, use
and influence remain free from the diktat of a control structure. So, to
understand the nature of it, you have to picture FLOSS as part of an emerging
transdisciplinary field that deals with different forms of openness. The
resulting complexity stems from the confrontation of the many different
disciplines and groups involved, and the many people forming them.

FLOSS+Art, or the interaction between the FLOSS philosophy and digital art,
should not be seen as yet another category of art, but as an added layer. It
acts as another dimension on top of existing fields of digital art and enriches
the way artists and collectives can work by adding another degree of freedom in
the creative process. We think this openness will create more transparency and
bring to light otherwise hidden properties of digital art practice in the world
of connected artist communities and collectives. And although it is too early
to speculate on the long-term influence FLOSS will have on digital art, we
believe it will bring a better understanding of software as an artistic medium
beyond the simplicity of neoclassical code aesthetics.

